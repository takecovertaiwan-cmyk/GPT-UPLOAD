# app.py — WesmartAI Report Generator (English Edition)
# Compatible with Render Free Tier / Colab environment
# Focus: Report PDF generation only (no model calls)

import os
import json
import hashlib
import uuid
from datetime import datetime
from flask import Flask, request, jsonify, send_file, render_template_string
from fpdf import FPDF
from PIL import Image, ImageDraw, ImageFont

app = Flask(__name__)

UPLOAD_FOLDER = "uploads"
REPORT_FOLDER = "reports"
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
os.makedirs(REPORT_FOLDER, exist_ok=True)

# ----------------------------------------------------
# Utility: Render text as RGB (non-transparent) image
# ----------------------------------------------------
def render_text_to_image(text, image_path, font_size=22):
    """Render header text into RGB PNG image (no alpha channel)."""
    font = ImageFont.load_default()
    bbox = font.getbbox(text)
    w, h = bbox[2] + 30, bbox[3] + 15
    img = Image.new("RGB", (w, h), (255, 255, 255))  # non-transparent
    draw = ImageDraw.Draw(img)
    draw.text((10, 5), text, font=font, fill=(0, 0, 0))
    img.save(image_path, format="PNG")

# ----------------------------------------------------
# PDF Report Builder
# ----------------------------------------------------
class WesmartPDFReport(FPDF):
    def header(self):
        self.set_font("helvetica", "B", 14)
        self.cell(0, 10, "WesmartAI Proof Report", ln=True, align="C")
        self.ln(8)

    def footer(self):
        self.set_y(-15)
        self.set_font("helvetica", "I", 8)
        self.cell(0, 10, f"Page {self.page_no()}/{{nb}}", align="C")

    def create_cover(self, data):
        self.add_page()
        self.set_font("helvetica", "B", 18)
        self.cell(0, 15, "AI Creation Proof Report", ln=True, align="C")
        self.ln(10)
        self.set_font("helvetica", "", 12)
        self.multi_cell(0, 10, f"Report ID: {data['report_id']}")
        self.multi_cell(0, 10, f"Generated At: {data['timestamp']}")
        self.multi_cell(0, 10, f"Main Hash: {data['report_main_hash']}")
        self.multi_cell(0, 10, f"Uploaded Files: {len(data['files'])}")
        self.ln(10)
        self.multi_cell(0, 10,
            "This report certifies that all listed files were uploaded, "
            "hashed, and timestamped via WesmartAI’s verification engine. "
            "It can be used to prove authorship, creation sequence, or integrity."
        )

    def create_file_details(self, data):
        for f in data["files"]:
            self.add_page()
            self.set_font("helvetica", "B", 14)
            self.cell(0, 10, "File Information", ln=True)
            self.set_font("helvetica", "", 12)
            self.multi_cell(0, 10, f"Filename: {f['filename']}")
            self.multi_cell(0, 10, f"SHA256: {f['sha256']}")
            self.multi_cell(0, 10, f"Size: {f['size']} bytes")
            self.multi_cell(0, 10, f"Uploaded at: {f['uploaded_at']}")
            self.ln(5)
            # Render header as image (safe RGB)
            header_img = os.path.join(REPORT_FOLDER, f"{uuid.uuid4()}.png")
            render_text_to_image(f['filename'], header_img)
            self.image(header_img, x=10, y=self.get_y(), w=100)
            self.ln(40)

    def create_summary(self):
        self.add_page()
        self.set_font("helvetica", "B", 14)
        self.cell(0, 10, "Report Summary", ln=True)
        self.set_font("helvetica", "", 12)
        self.multi_cell(
            0,
            10,
            "This proof report was automatically generated by WesmartAI. "
            "It includes file metadata, SHA-256 fingerprints, and timestamps. "
            "This report can be archived or shared for legal or compliance purposes."
        )

# ----------------------------------------------------
# API Routes
# ----------------------------------------------------
@app.route("/")
def index():
    html = """
    <html>
    <head><title>WesmartAI Report Generator</title></head>
    <body style="font-family:Arial; text-align:center; padding:40px;">
      <h2>WesmartAI Report Generator (English Test Mode)</h2>
      <form action="/upload" method="post" enctype="multipart/form-data">
        <p><input type="file" name="file" multiple></p>
        <p><input type="submit" value="Upload & Generate Proof"></p>
      </form>
    </body></html>
    """
    return render_template_string(html)

@app.route("/upload", methods=["POST"])
def upload_file():
    uploaded_files = request.files.getlist("file")
    file_infos = []

    for f in uploaded_files:
        if f.filename == "":
            continue
        save_path = os.path.join(UPLOAD_FOLDER, f.filename)
        f.save(save_path)
        with open(save_path, "rb") as src:
            file_bytes = src.read()
        file_info = {
            "filename": f.filename,
            "sha256": hashlib.sha256(file_bytes).hexdigest(),
            "size": os.path.getsize(save_path),
            "uploaded_at": datetime.utcnow().isoformat(),
        }
        file_infos.append(file_info)

    proof_data = {
        "report_id": str(uuid.uuid4()),
        "timestamp": datetime.utcnow().isoformat(),
        "files": file_infos,
    }

    proof_json = json.dumps(proof_data, indent=2).encode("utf-8")
    proof_data["report_main_hash"] = hashlib.sha256(proof_json).hexdigest()

    try:
        pdf = WesmartPDFReport()
        pdf.alias_nb_pages()
        pdf.create_cover(proof_data)
        pdf.create_file_details(proof_data)
        pdf.create_summary()

        report_path = os.path.join(REPORT_FOLDER, f"{proof_data['report_id']}.pdf")
        pdf.output(report_path)
        return jsonify({
            "status": "success",
            "report_id": proof_data["report_id"],
            "report_path": report_path,
        })
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route("/download/<rid>")
def download_report(rid):
    path = os.path.join(REPORT_FOLDER, f"{rid}.pdf")
    if not os.path.exists(path):
        return jsonify({"error": "Report not found"}), 404
    return send_file(path, as_attachment=True)

# ----------------------------------------------------
# Run App
# ----------------------------------------------------
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)
